sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 32
Window Size: 64
Number of Virtual Registers: 32
Number of Physical Registers: 64
Datapath Width: 64
Total Power Consumption: 489.54
Branch Predictor Power Consumption: 2.84842  (0.584%)
 branch target buffer power (W): 2.49493
 local predict power (W): 0.0867068
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 9.38767  (1.93%)
 Instruction Decode Power (W): 0.127932
 RAT decode_power (W): 0.908115
 RAT wordline_power (W): 0.634666
 RAT bitline_power (W): 6.81527
 DCL Comparators (W): 0.901689
Instruction Window Power Consumption: 139.184  (28.5%)
 tagdrive (W): 9.11588
 tagmatch (W): 2.61737
 Selection Logic (W): 0.450969
 decode_power (W): 1.95317
 wordline_power (W): 4.02565
 bitline_power (W): 121.021
Load/Store Queue Power Consumption: 9.33077  (1.91%)
 tagdrive (W): 4.52311
 tagmatch (W): 1.71883
 decode_power (W): 0.162764
 wordline_power (W): 0.0433172
 bitline_power (W): 2.88275
Arch. Register File Power Consumption: 75.6732  (15.5%)
 decode_power (W): 0.908115
 wordline_power (W): 4.02565
 bitline_power (W): 70.7394
Result Bus Power Consumption: 107.322  (22%)
Total Clock Power: 91.558  (18.8%)
Int ALU Power: 4.66013  (0.956%)
FP ALU Power: 28.5621  (5.86%)
Instruction Cache Power Consumption: 2.76773  (0.568%)
 decode_power (W): 0.151353
 wordline_power (W): 0.180479
 bitline_power (W): 1.42251
 senseamp_power (W): 0.768
 tagarray_power (W): 0.245382
Itlb_power (W): 0.264936 (0.0543%)
Data Cache Power Consumption: 11.0709  (2.27%)
 decode_power (W): 0.60541
 wordline_power (W): 0.721917
 bitline_power (W): 5.69006
 senseamp_power (W): 3.072
 tagarray_power (W): 0.981529
Dtlb_power (W): 1.80688 (0.371%)
Level 2 Cache Power Consumption: 3.10298 (0.636%)
 decode_power (W): 0.19487
 wordline_power (W): 0.0430878
 bitline_power (W): 1.77274
 senseamp_power (W): 0.192
 tagarray_power (W): 0.900275
sim: loading EIO file: ../benchmarks/253.perlbmk.diffmail-ref.eio.gz
sim: command line: ./sim-outorder -config ../configs/current.config ../benchmarks/253.perlbmk.diffmail-ref.eio.gz 

sim: simulation started @ Tue Nov 24 12:20:07 2015, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim     ../results/25_23_width/253.perlbmk.diffmail-ref.eio.gz.out # redirect simulator output to file (non-interactive only)
# -redir:prog       /dev/null # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-freq            600000000.0000 # frequency             
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize             32 # instruction fetch queue size (in insts)
-fetch:mplat               15 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                perfect # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 4 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width              32 # instruction decode B/W (insts/cycle)
-issue:width               32 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width              32 # instruction commit B/W (insts/cycle)
-ruu:size                  64 # register update unit (RUU) size
-lsq:size                  64 # load/store queue (LSQ) size
-cache:dl1       dl1:32:64:8:f # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       dl2:256:64:8:f # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               2 # l2 data cache hit latency (in cycles)
-cache:il1       il1:32:64:8:f # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               2 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         103 1 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  2 # total number of integer multiplier/dividers available
-res:memport                4 # total number of memory system ports available (to CPU)
-res:fpalu                  8 # total number of floating point ALU's available
-res:fpmult                 2 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000010 # total number of instructions committed
sim_num_refs               46161589 # total number of loads and stores committed
sim_num_loads              29759423 # total number of loads committed
sim_num_stores         16402166.0000 # total number of stores committed
sim_num_branches           14085062 # total number of branches committed
sim_elapsed_time                168 # total simulation time in seconds
sim_inst_rate           595238.1548 # simulation speed (in insts/sec)
sim_total_insn            100000010 # total number of instructions executed
sim_total_refs             46161589 # total number of loads and stores executed
sim_total_loads            29759423 # total number of loads executed
sim_total_stores       16402166.0000 # total number of stores executed
sim_total_branches         14085062 # total number of branches executed
sim_cycle                  75999004 # total simulation time in cycles
sim_IPC                      1.3158 # instructions per cycle
sim_CPI                      0.7600 # cycles per instruction
sim_exec_BW                  1.3158 # total instructions (mis-spec + committed) per cycle
sim_IPB                      7.0997 # instruction per branch
IFQ_count                1214562676 # cumulative IFQ occupancy
IFQ_fcount                 36651964 # cumulative IFQ full count
ifq_occupancy               15.9813 # avg IFQ occupancy (insn's)
ifq_rate                     1.3158 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                 12.1456 # avg IFQ occupant latency (cycle's)
ifq_full                     0.4823 # fraction of time (cycle's) IFQ was full
RUU_count                2646435665 # cumulative RUU occupancy
RUU_fcount                 30428126 # cumulative RUU full count
ruu_occupancy               34.8220 # avg RUU occupancy (insn's)
ruu_rate                     1.3158 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 26.4644 # avg RUU occupant latency (cycle's)
ruu_full                     0.4004 # fraction of time (cycle's) RUU was full
LSQ_count                1224852639 # cumulative LSQ occupancy
LSQ_fcount                        0 # cumulative LSQ full count
lsq_occupancy               16.1167 # avg LSQ occupancy (insn's)
lsq_rate                     1.3158 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                 12.2485 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0000 # fraction of time (cycle's) LSQ was full
sim_slip                 4017443944 # total number of slip cycles
avg_sim_slip                40.1744 # the average slip between issue and retirement
il1.accesses              343815417 # total number of accesses
il1.hits                  341772963 # total number of hits
il1.misses                  2042454 # total number of misses
il1.replacements            2042198 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0059 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0059 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               44573075 # total number of accesses
dl1.hits                   43800609 # total number of hits
dl1.misses                   772466 # total number of misses
dl1.replacements             772210 # total number of replacements
dl1.writebacks               349305 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0173 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0173 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0078 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl2.accesses                3164225 # total number of accesses
dl2.hits                    2546856 # total number of hits
dl2.misses                   617369 # total number of misses
dl2.replacements             615321 # total number of replacements
dl2.writebacks               121585 # total number of writebacks
dl2.invalidations                 0 # total number of invalidations
dl2.miss_rate                0.1951 # miss rate (i.e., misses/ref)
dl2.repl_rate                0.1945 # replacement rate (i.e., repls/ref)
dl2.wb_rate                  0.0384 # writeback rate (i.e., wrbks/ref)
dl2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             343815417 # total number of accesses
itlb.hits                 343810379 # total number of hits
itlb.misses                    5038 # total number of misses
itlb.replacements              4979 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              46161565 # total number of accesses
dtlb.hits                  46133667 # total number of hits
dtlb.misses                   27898 # total number of misses
dtlb.replacements             27771 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0006 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0006 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power           713453805.1188 # total power usage of rename unit
bpred_power            216477438.0819 # total power usage of bpred unit
window_power           10577852769.4870 # total power usage of instruction window
lsq_power              709129384.9892 # total power usage of load/store queue
regfile_power          5751087798.0877 # total power usage of arch. regfile
icache_power           230479457.7497 # total power usage of icache
dcache_power           978699680.3872 # total power usage of dcache
dcache2_power          235823143.9329 # total power usage of dcache2
alu_power              2524855659.7030 # total power usage of alu
falu_power             2170690385.8027 # total power usage of falu
resultbus_power        8156369766.2775 # total power usage of resultbus
clock_power            6958319404.7429 # total power usage of clock
avg_rename_power             9.3877 # avg power usage of rename unit
avg_bpred_power              2.8484 # avg power usage of bpred unit
avg_window_power           139.1841 # avg power usage of instruction window
avg_lsq_power                9.3308 # avg power usage of lsq
avg_regfile_power           75.6732 # avg power usage of arch. regfile
avg_icache_power             3.0327 # avg power usage of icache
avg_dcache_power            12.8778 # avg power usage of dcache
avg_dcache2_power            3.1030 # avg power usage of dcache2
avg_alu_power               33.2222 # avg power usage of alu
avg_falu_power              28.5621 # avg power usage of falu
avg_resultbus_power        107.3221 # avg power usage of resultbus
avg_clock_power             91.5580 # avg power usage of clock
fetch_stage_power      446956895.8316 # total power usage of fetch stage
dispatch_stage_power   713453805.1188 # total power usage of dispatch stage
issue_stage_power      23182730404.7769 # total power usage of issue stage
avg_fetch_power              5.8811 # average power of fetch unit per cycle
avg_dispatch_power           9.3877 # average power of dispatch unit per cycle
avg_issue_power            305.0399 # average power of issue unit per cycle
total_power            37052548308.5578 # total power per cycle
avg_total_power_cycle      487.5399 # average total power per cycle
avg_total_power_cycle_nofp_nod2     455.8749 # average total power per cycle
avg_total_power_insn       370.5254 # average total power per insn
avg_total_power_insn_nofp_nod2     346.4603 # average total power per insn
rename_power_cc1       199084833.6576 # total power usage of rename unit_cc1
bpred_power_cc1              0.0000 # total power usage of bpred unit_cc1
window_power_cc1       3489501045.0214 # total power usage of instruction window_cc1
lsq_power_cc1          130457865.9798 # total power usage of lsq_cc1
regfile_power_cc1      1599134429.6830 # total power usage of arch. regfile_cc1
icache_power_cc1       65448062.4146 # total power usage of icache_cc1
dcache_power_cc1       252815306.1206 # total power usage of dcache_cc1
dcache2_power_cc1      8329346.1488 # total power usage of dcache2_cc1
alu_power_cc1          127128994.5739 # total power usage of alu_cc1
resultbus_power_cc1    2724075185.6438 # total power usage of resultbus_cc1
clock_power_cc1        2004767832.3685 # total power usage of clock_cc1
avg_rename_power_cc1         2.6196 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.0000 # avg power usage of bpred unit_cc1
avg_window_power_cc1        45.9151 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            1.7166 # avg power usage of lsq_cc1
avg_regfile_power_cc1       21.0415 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         0.8612 # avg power usage of icache_cc1
avg_dcache_power_cc1         3.3266 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.1096 # avg power usage of dcache2_cc1
avg_alu_power_cc1            1.6728 # avg power usage of alu_cc1
avg_resultbus_power_cc1      35.8436 # avg power usage of resultbus_cc1
avg_clock_power_cc1         26.3789 # avg power usage of clock_cc1
fetch_stage_power_cc1  65448062.4146 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1 199084833.6576 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  6732307743.4882 # total power usage of issue stage_cc1
avg_fetch_power_cc1          0.8612 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       2.6196 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1         88.5842 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  10600742901.6118 # total power per cycle_cc1
avg_total_power_cycle_cc1     139.4853 # average total power per cycle_cc1
avg_total_power_insn_cc1     106.0074 # average total power per insn_cc1
rename_power_cc2       29336481.3264 # total power usage of rename unit_cc2
bpred_power_cc2              0.0000 # total power usage of bpred unit_cc2
window_power_cc2       625619556.1400 # total power usage of instruction window_cc2
lsq_power_cc2          58464932.4554 # total power usage of lsq_cc2
regfile_power_cc2      77692623.7059 # total power usage of arch. regfile_cc2
icache_power_cc2       65448062.4146 # total power usage of icache_cc2
dcache_power_cc2       143500743.0117 # total power usage of dcache_cc2
dcache2_power_cc2      2454629.1692 # total power usage of dcache2_cc2
alu_power_cc2          116736840.3255 # total power usage of alu_cc2
resultbus_power_cc2    363703288.7894 # total power usage of resultbus_cc2
clock_power_cc2        345871296.3152 # total power usage of clock_cc2
avg_rename_power_cc2         0.3860 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.0000 # avg power usage of bpred unit_cc2
avg_window_power_cc2         8.2319 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.7693 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        1.0223 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         0.8612 # avg power usage of icache_cc2
avg_dcache_power_cc2         1.8882 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0323 # avg power usage of dcache2_cc2
avg_alu_power_cc2            1.5360 # avg power usage of alu_cc2
avg_resultbus_power_cc2       4.7856 # avg power usage of resultbus_cc2
avg_clock_power_cc2          4.5510 # avg power usage of clock_cc2
fetch_stage_power_cc2  65448062.4146 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2 29336481.3264 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  1310479989.8913 # total power usage of issue stage_cc2
avg_fetch_power_cc2          0.8612 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.3860 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2         17.2434 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  1828828453.6534 # total power per cycle_cc2
avg_total_power_cycle_cc2      24.0638 # average total power per cycle_cc2
avg_total_power_insn_cc2      18.2883 # average total power per insn_cc2
rename_power_cc3       80773378.4111 # total power usage of rename unit_cc3
bpred_power_cc3        21647743.8162 # total power usage of bpred unit_cc3
window_power_cc3       1294477953.1093 # total power usage of instruction window_cc3
lsq_power_cc3          115911205.1010 # total power usage of lsq_cc3
regfile_power_cc3      476304387.6935 # total power usage of arch. regfile_cc3
icache_power_cc3       81951202.0646 # total power usage of icache_cc3
dcache_power_cc3       216915398.5738 # total power usage of dcache_cc3
dcache2_power_cc3      25204151.7394 # total power usage of dcache2_cc3
alu_power_cc3          356509506.3042 # total power usage of alu_cc3
resultbus_power_cc3    888772244.3050 # total power usage of resultbus_cc3
clock_power_cc3        823885584.9236 # total power usage of clock_cc3
avg_rename_power_cc3         1.0628 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.2848 # avg power usage of bpred unit_cc3
avg_window_power_cc3        17.0328 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            1.5252 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        6.2672 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         1.0783 # avg power usage of icache_cc3
avg_dcache_power_cc3         2.8542 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.3316 # avg power usage of dcache2_cc3
avg_alu_power_cc3            4.6910 # avg power usage of alu_cc3
avg_resultbus_power_cc3      11.6945 # avg power usage of resultbus_cc3
avg_clock_power_cc3         10.8407 # avg power usage of clock_cc3
fetch_stage_power_cc3  103598945.8808 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3 80773378.4111 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  2897790459.1327 # total power usage of issue stage_cc3
avg_fetch_power_cc3          1.3632 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       1.0628 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3         38.1293 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  4382352756.0416 # total power per cycle_cc3
avg_total_power_cycle_cc3      57.6633 # average total power per cycle_cc3
avg_total_power_insn_cc3      43.8235 # average total power per insn_cc3
total_rename_access       100000010 # total number accesses of rename unit
total_bpred_access                0 # total number accesses of bpred unit
total_window_access       363680333 # total number accesses of instruction window
total_lsq_access           47750055 # total number accesses of load/store queue
total_regfile_access      109119112 # total number accesses of arch. regfile
total_icache_access       343815417 # total number accesses of icache
total_dcache_access        44573075 # total number accesses of dcache
total_dcache2_access        3164225 # total number accesses of dcache2
total_alu_access           99999265 # total number accesses of alu
total_resultbus_access    115674312 # total number accesses of resultbus
avg_rename_access            1.3158 # avg number accesses of rename unit
avg_bpred_access             0.0000 # avg number accesses of bpred unit
avg_window_access            4.7853 # avg number accesses of instruction window
avg_lsq_access               0.6283 # avg number accesses of lsq
avg_regfile_access           1.4358 # avg number accesses of arch. regfile
avg_icache_access            4.5239 # avg number accesses of icache
avg_dcache_access            0.5865 # avg number accesses of dcache
avg_dcache2_access           0.0416 # avg number accesses of dcache2
avg_alu_access               1.3158 # avg number accesses of alu
avg_resultbus_access         1.5221 # avg number accesses of resultbus
max_rename_access                32 # max number accesses of rename unit
max_bpred_access                  0 # max number accesses of bpred unit
max_window_access                64 # max number accesses of instruction window
max_lsq_access                   19 # max number accesses of load/store queue
max_regfile_access               47 # max number accesses of arch. regfile
max_icache_access                32 # max number accesses of icache
max_dcache_access                 8 # max number accesses of dcache
max_dcache2_access                9 # max number accesses of dcache2
max_alu_access                    7 # max number accesses of alu
max_resultbus_access             20 # max number accesses of resultbus
max_cycle_power_cc1        407.7760 # maximum cycle power usage of cc1
max_cycle_power_cc2        148.0858 # maximum cycle power usage of cc2
max_cycle_power_cc3        157.8570 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 876544 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                 131616 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x01200b4d58 # program entry point (initial PC)
ld_environ_base        0x011ff96b80 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 4996 # total number of pages allocated
mem.page_mem                 39968k # total size of memory pages allocated
mem.ptab_misses              173706 # total first level page table misses
mem.ptab_accesses        1377935118 # total page table accesses
mem.ptab_miss_rate           0.0001 # first level page table miss rate

