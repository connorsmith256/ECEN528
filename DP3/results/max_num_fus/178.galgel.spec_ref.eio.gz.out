sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 4
Window Size: 16
Number of Virtual Registers: 32
Number of Physical Registers: 16
Datapath Width: 64
Total Power Consumption: 130.433
Branch Predictor Power Consumption: 2.84969  (2.22%)
 branch target buffer power (W): 2.49493
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 0.417965  (0.325%)
 Instruction Decode Power (W): 0.0159915
 RAT decode_power (W): 0.113514
 RAT wordline_power (W): 0.0307815
 RAT bitline_power (W): 0.246771
 DCL Comparators (W): 0.0109075
Instruction Window Power Consumption: 2.20432  (1.72%)
 tagdrive (W): 0.0943488
 tagmatch (W): 0.033695
 Selection Logic (W): 0.0134217
 decode_power (W): 0.0532503
 wordline_power (W): 0.0844643
 bitline_power (W): 1.92514
Load/Store Queue Power Consumption: 6.38923  (4.97%)
 tagdrive (W): 2.22773
 tagmatch (W): 0.482855
 decode_power (W): 0.0319831
 wordline_power (W): 0.139808
 bitline_power (W): 3.50685
Arch. Register File Power Consumption: 3.57247  (2.78%)
 decode_power (W): 0.113514
 wordline_power (W): 0.0844643
 bitline_power (W): 3.37449
Result Bus Power Consumption: 4.18077  (3.26%)
Total Clock Power: 39.046  (30.4%)
Int ALU Power: 9.32026  (7.26%)
FP ALU Power: 28.5621  (22.2%)
Instruction Cache Power Consumption: 2.76773  (2.15%)
 decode_power (W): 0.151353
 wordline_power (W): 0.180479
 bitline_power (W): 1.42251
 senseamp_power (W): 0.768
 tagarray_power (W): 0.245382
Itlb_power (W): 0.264834 (0.206%)
Data Cache Power Consumption: 22.1418  (17.2%)
 decode_power (W): 1.21082
 wordline_power (W): 1.44383
 bitline_power (W): 11.3801
 senseamp_power (W): 6.144
 tagarray_power (W): 1.96306
Dtlb_power (W): 3.61295 (2.81%)
Level 2 Cache Power Consumption: 3.10298 (2.42%)
 decode_power (W): 0.19487
 wordline_power (W): 0.0430878
 bitline_power (W): 1.77274
 senseamp_power (W): 0.192
 tagarray_power (W): 0.900275
sim: loading EIO file: ../benchmarks/178.galgel.spec_ref.eio.gz
sim: command line: ./sim-outorder -config ../configs/current.config ../benchmarks/178.galgel.spec_ref.eio.gz 

sim: simulation started @ Sun Nov 22 21:53:05 2015, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim     ../results/max_num_fus/178.galgel.spec_ref.eio.gz.out # redirect simulator output to file (non-interactive only)
# -redir:prog       /dev/null # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-freq            600000000.0000 # frequency             
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                perfect # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:32:64:8:f # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       dl2:256:64:8:f # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               2 # l2 data cache hit latency (in cycles)
-cache:il1       il1:32:64:8:f # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               2 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 1 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   8 # total number of integer ALU's available
-res:imult                  8 # total number of integer multiplier/dividers available
-res:memport                8 # total number of memory system ports available (to CPU)
-res:fpalu                  8 # total number of floating point ALU's available
-res:fpmult                 8 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000001 # total number of instructions committed
sim_num_refs               44609060 # total number of loads and stores committed
sim_num_loads              39597079 # total number of loads committed
sim_num_stores         5011981.0000 # total number of stores committed
sim_num_branches            4613098 # total number of branches committed
sim_elapsed_time                133 # total simulation time in seconds
sim_inst_rate           751879.7068 # simulation speed (in insts/sec)
sim_total_insn            100000001 # total number of instructions executed
sim_total_refs             44609060 # total number of loads and stores executed
sim_total_loads            39597079 # total number of loads executed
sim_total_stores       5011981.0000 # total number of stores executed
sim_total_branches          4613098 # total number of branches executed
sim_cycle                 114656012 # total simulation time in cycles
sim_IPC                      0.8722 # instructions per cycle
sim_CPI                      1.1466 # cycles per instruction
sim_exec_BW                  0.8722 # total instructions (mis-spec + committed) per cycle
sim_IPB                     21.6774 # instruction per branch
IFQ_count                 458621184 # cumulative IFQ occupancy
IFQ_fcount                114655277 # cumulative IFQ full count
ifq_occupancy                4.0000 # avg IFQ occupancy (insn's)
ifq_rate                     0.8722 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  4.5862 # avg IFQ occupant latency (cycle's)
ifq_full                     1.0000 # fraction of time (cycle's) IFQ was full
RUU_count                1634507075 # cumulative RUU occupancy
RUU_fcount                 64646320 # cumulative RUU full count
ruu_occupancy               14.2557 # avg RUU occupancy (insn's)
ruu_rate                     0.8722 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 16.3451 # avg RUU occupant latency (cycle's)
ruu_full                     0.5638 # fraction of time (cycle's) RUU was full
LSQ_count                 807912930 # cumulative LSQ occupancy
LSQ_fcount                 42915489 # cumulative LSQ full count
lsq_occupancy                7.0464 # avg LSQ occupancy (insn's)
lsq_rate                     0.8722 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  8.0791 # avg LSQ occupant latency (cycle's)
lsq_full                     0.3743 # fraction of time (cycle's) LSQ was full
sim_slip                 2587028980 # total number of slip cycles
avg_sim_slip                25.8703 # the average slip between issue and retirement
il1.accesses              108343037 # total number of accesses
il1.hits                  108343008 # total number of hits
il1.misses                       29 # total number of misses
il1.replacements                  0 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               44595225 # total number of accesses
dl1.hits                   37070566 # total number of hits
dl1.misses                  7524659 # total number of misses
dl1.replacements            7524403 # total number of replacements
dl1.writebacks              2494536 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.1687 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.1687 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0559 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl2.accesses               10019224 # total number of accesses
dl2.hits                    8966889 # total number of hits
dl2.misses                  1052335 # total number of misses
dl2.replacements            1050287 # total number of replacements
dl2.writebacks               321290 # total number of writebacks
dl2.invalidations                 0 # total number of invalidations
dl2.miss_rate                0.1050 # miss rate (i.e., misses/ref)
dl2.repl_rate                0.1048 # replacement rate (i.e., repls/ref)
dl2.wb_rate                  0.0321 # writeback rate (i.e., wrbks/ref)
dl2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             108343037 # total number of accesses
itlb.hits                 108343036 # total number of hits
itlb.misses                       1 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              44609055 # total number of accesses
dtlb.hits                  39451722 # total number of hits
dtlb.misses                 5157333 # total number of misses
dtlb.replacements           5157205 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.1156 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.1156 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power           47922255.8534 # total power usage of rename unit
bpred_power            326733970.2917 # total power usage of bpred unit
window_power           252738473.5933 # total power usage of instruction window
lsq_power              732563823.1344 # total power usage of load/store queue
regfile_power          409605403.8979 # total power usage of arch. regfile
icache_power           347701585.7160 # total power usage of icache
dcache_power           2952940726.0141 # total power usage of dcache
dcache2_power          355774942.5629 # total power usage of dcache2
alu_power              4343439278.4805 # total power usage of alu
falu_power             3274815324.3386 # total power usage of falu
resultbus_power        479350960.1843 # total power usage of resultbus
clock_power            4476863838.8528 # total power usage of clock
avg_rename_power             0.4180 # avg power usage of rename unit
avg_bpred_power              2.8497 # avg power usage of bpred unit
avg_window_power             2.2043 # avg power usage of instruction window
avg_lsq_power                6.3892 # avg power usage of lsq
avg_regfile_power            3.5725 # avg power usage of arch. regfile
avg_icache_power             3.0326 # avg power usage of icache
avg_dcache_power            25.7548 # avg power usage of dcache
avg_dcache2_power            3.1030 # avg power usage of dcache2
avg_alu_power               37.8824 # avg power usage of alu
avg_falu_power              28.5621 # avg power usage of falu
avg_resultbus_power          4.1808 # avg power usage of resultbus
avg_clock_power             39.0460 # avg power usage of clock
fetch_stage_power      674435556.0077 # total power usage of fetch stage
dispatch_stage_power   47922255.8534 # total power usage of dispatch stage
issue_stage_power      9116808203.9695 # total power usage of issue stage
avg_fetch_power              5.8823 # average power of fetch unit per cycle
avg_dispatch_power           0.4180 # average power of dispatch unit per cycle
avg_issue_power             79.5144 # average power of issue unit per cycle
total_power            14725635258.5813 # total power per cycle
avg_total_power_cycle      128.4332 # average total power per cycle
avg_total_power_cycle_nofp_nod2      96.7681 # average total power per cycle
avg_total_power_insn       147.2564 # average total power per insn
avg_total_power_insn_nofp_nod2     110.9504 # average total power per insn
rename_power_cc1       14841991.6306 # total power usage of rename unit_cc1
bpred_power_cc1              0.0000 # total power usage of bpred unit_cc1
window_power_cc1       116015898.2190 # total power usage of instruction window_cc1
lsq_power_cc1          91427733.9184 # total power usage of lsq_cc1
regfile_power_cc1      113514023.8426 # total power usage of arch. regfile_cc1
icache_power_cc1       107686617.3725 # total power usage of icache_cc1
dcache_power_cc1       779018936.3521 # total power usage of dcache_cc1
dcache2_power_cc1      22421048.9408 # total power usage of dcache2_cc1
alu_power_cc1          936263380.5695 # total power usage of alu_cc1
resultbus_power_cc1    204191731.9863 # total power usage of resultbus_cc1
clock_power_cc1        1050509339.3711 # total power usage of clock_cc1
avg_rename_power_cc1         0.1294 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.0000 # avg power usage of bpred unit_cc1
avg_window_power_cc1         1.0119 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.7974 # avg power usage of lsq_cc1
avg_regfile_power_cc1        0.9900 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         0.9392 # avg power usage of icache_cc1
avg_dcache_power_cc1         6.7944 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.1956 # avg power usage of dcache2_cc1
avg_alu_power_cc1            8.1658 # avg power usage of alu_cc1
avg_resultbus_power_cc1       1.7809 # avg power usage of resultbus_cc1
avg_clock_power_cc1          9.1623 # avg power usage of clock_cc1
fetch_stage_power_cc1  107686617.3725 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1 14841991.6306 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  2149338729.9859 # total power usage of issue stage_cc1
avg_fetch_power_cc1          0.9392 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.1294 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1         18.7460 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  3435890702.2028 # total power per cycle_cc1
avg_total_power_cycle_cc1      29.9669 # average total power per cycle_cc1
avg_total_power_insn_cc1      34.3589 # average total power per insn_cc1
rename_power_cc2       10449137.2714 # total power usage of rename unit_cc2
bpred_power_cc2              0.0000 # total power usage of bpred unit_cc2
window_power_cc2       89769449.0082 # total power usage of instruction window_cc2
lsq_power_cc2          15304015.5743 # total power usage of lsq_cc2
regfile_power_cc2      47307278.4139 # total power usage of arch. regfile_cc2
icache_power_cc2       107686617.3725 # total power usage of icache_cc2
dcache_power_cc2       143567543.6240 # total power usage of dcache_cc2
dcache2_power_cc2      3886177.4189 # total power usage of dcache2_cc2
alu_power_cc2          182291190.9259 # total power usage of alu_cc2
resultbus_power_cc2    132266610.2720 # total power usage of resultbus_cc2
clock_power_cc2        323345490.6316 # total power usage of clock_cc2
avg_rename_power_cc2         0.0911 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.0000 # avg power usage of bpred unit_cc2
avg_window_power_cc2         0.7829 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.1335 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.4126 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         0.9392 # avg power usage of icache_cc2
avg_dcache_power_cc2         1.2522 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0339 # avg power usage of dcache2_cc2
avg_alu_power_cc2            1.5899 # avg power usage of alu_cc2
avg_resultbus_power_cc2       1.1536 # avg power usage of resultbus_cc2
avg_clock_power_cc2          2.8201 # avg power usage of clock_cc2
fetch_stage_power_cc2  107686617.3725 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2 10449137.2714 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  567084986.8232 # total power usage of issue stage_cc2
avg_fetch_power_cc2          0.9392 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.0911 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          4.9460 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  1055873510.5125 # total power per cycle_cc2
avg_total_power_cycle_cc2       9.2091 # average total power per cycle_cc2
avg_total_power_insn_cc2      10.5587 # average total power per insn_cc2
rename_power_cc3       13757163.6747 # total power usage of rename unit_cc3
bpred_power_cc3        32673397.0162 # total power usage of bpred unit_cc3
window_power_cc3       103029629.9287 # total power usage of instruction window_cc3
lsq_power_cc3          79080823.6548 # total power usage of lsq_cc3
regfile_power_cc3      75170476.6256 # total power usage of arch. regfile_cc3
icache_power_cc3       131688114.1358 # total power usage of icache_cc3
dcache_power_cc3       360959722.6101 # total power usage of dcache_cc3
dcache2_power_cc3      37221566.6242 # total power usage of dcache2_cc3
alu_power_cc3          523008779.0747 # total power usage of alu_cc3
resultbus_power_cc3    159590038.3985 # total power usage of resultbus_cc3
clock_power_cc3        664793039.7805 # total power usage of clock_cc3
avg_rename_power_cc3         0.1200 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.2850 # avg power usage of bpred unit_cc3
avg_window_power_cc3         0.8986 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.6897 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.6556 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         1.1485 # avg power usage of icache_cc3
avg_dcache_power_cc3         3.1482 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.3246 # avg power usage of dcache2_cc3
avg_alu_power_cc3            4.5615 # avg power usage of alu_cc3
avg_resultbus_power_cc3       1.3919 # avg power usage of resultbus_cc3
avg_clock_power_cc3          5.7982 # avg power usage of clock_cc3
fetch_stage_power_cc3  164361511.1520 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3 13757163.6747 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  1262890560.2910 # total power usage of issue stage_cc3
avg_fetch_power_cc3          1.4335 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.1200 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3         11.0146 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  2180972751.5238 # total power per cycle_cc3
avg_total_power_cycle_cc3      19.0219 # average total power per cycle_cc3
avg_total_power_insn_cc3      21.8097 # average total power per insn_cc3
total_rename_access       100000001 # total number accesses of rename unit
total_bpred_access                0 # total number accesses of bpred unit
total_window_access       432820203 # total number accesses of instruction window
total_lsq_access           44622885 # total number accesses of load/store queue
total_regfile_access      184715126 # total number accesses of arch. regfile
total_icache_access       108343037 # total number accesses of icache
total_dcache_access        44595225 # total number accesses of dcache
total_dcache2_access       10019224 # total number accesses of dcache2
total_alu_access           99996555 # total number accesses of alu
total_resultbus_access    134983961 # total number accesses of resultbus
avg_rename_access            0.8722 # avg number accesses of rename unit
avg_bpred_access             0.0000 # avg number accesses of bpred unit
avg_window_access            3.7749 # avg number accesses of instruction window
avg_lsq_access               0.3892 # avg number accesses of lsq
avg_regfile_access           1.6110 # avg number accesses of arch. regfile
avg_icache_access            0.9449 # avg number accesses of icache
avg_dcache_access            0.3889 # avg number accesses of dcache
avg_dcache2_access           0.0874 # avg number accesses of dcache2
avg_alu_access               0.8721 # avg number accesses of alu
avg_resultbus_access         1.1773 # avg number accesses of resultbus
max_rename_access                 4 # max number accesses of rename unit
max_bpred_access                  0 # max number accesses of bpred unit
max_window_access                17 # max number accesses of instruction window
max_lsq_access                    5 # max number accesses of load/store queue
max_regfile_access               11 # max number accesses of arch. regfile
max_icache_access                 4 # max number accesses of icache
max_dcache_access                 6 # max number accesses of dcache
max_dcache2_access                6 # max number accesses of dcache2
max_alu_access                    4 # max number accesses of alu
max_resultbus_access              8 # max number accesses of resultbus
max_cycle_power_cc1         93.2341 # maximum cycle power usage of cc1
max_cycle_power_cc2         35.4993 # maximum cycle power usage of cc2
max_cycle_power_cc3         42.9000 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                1048576 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size              138670480 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012002f6c4 # program entry point (initial PC)
ld_environ_base        0x011ff955a0 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                 6253 # total number of pages allocated
mem.page_mem                 50024k # total size of memory pages allocated
mem.ptab_misses              204961 # total first level page table misses
mem.ptab_accesses         892606194 # total page table accesses
mem.ptab_miss_rate           0.0002 # first level page table miss rate

