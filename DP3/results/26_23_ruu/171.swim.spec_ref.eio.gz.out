sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 16
Window Size: 128
Number of Virtual Registers: 32
Number of Physical Registers: 128
Datapath Width: 64
Total Power Consumption: 292.691
Branch Predictor Power Consumption: 2.84842  (0.98%)
 branch target buffer power (W): 2.49493
 local predict power (W): 0.0867068
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 3.68501  (1.27%)
 Instruction Decode Power (W): 0.0639661
 RAT decode_power (W): 0.454058
 RAT wordline_power (W): 0.257408
 RAT bitline_power (W): 2.69143
 DCL Comparators (W): 0.218151
Instruction Window Power Consumption: 76.4406  (26.3%)
 tagdrive (W): 6.64903
 tagmatch (W): 2.27024
 Selection Logic (W): 0.461706
 decode_power (W): 2.17466
 wordline_power (W): 1.0557
 bitline_power (W): 63.8292
Load/Store Queue Power Consumption: 10.6211  (3.65%)
 tagdrive (W): 4.52311
 tagmatch (W): 1.71883
 decode_power (W): 0.162764
 wordline_power (W): 0.0433172
 bitline_power (W): 4.1731
Arch. Register File Power Consumption: 25.1387  (8.65%)
 decode_power (W): 0.454058
 wordline_power (W): 1.0557
 bitline_power (W): 23.629
Result Bus Power Consumption: 55.6861  (19.2%)
Total Clock Power: 64.0353  (22%)
Int ALU Power: 4.66013  (1.6%)
FP ALU Power: 28.5621  (9.83%)
Instruction Cache Power Consumption: 2.76773  (0.952%)
 decode_power (W): 0.151353
 wordline_power (W): 0.180479
 bitline_power (W): 1.42251
 senseamp_power (W): 0.768
 tagarray_power (W): 0.245382
Itlb_power (W): 0.264936 (0.0911%)
Data Cache Power Consumption: 11.0709  (3.81%)
 decode_power (W): 0.60541
 wordline_power (W): 0.721917
 bitline_power (W): 5.69006
 senseamp_power (W): 3.072
 tagarray_power (W): 0.981529
Dtlb_power (W): 1.80688 (0.622%)
Level 2 Cache Power Consumption: 3.10298 (1.07%)
 decode_power (W): 0.19487
 wordline_power (W): 0.0430878
 bitline_power (W): 1.77274
 senseamp_power (W): 0.192
 tagarray_power (W): 0.900275
sim: loading EIO file: ../benchmarks/171.swim.spec_ref.eio.gz
sim: command line: ./sim-outorder -config ../configs/current.config ../benchmarks/171.swim.spec_ref.eio.gz 

sim: simulation started @ Tue Nov 24 12:27:14 2015, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim     ../results/26_23_ruu/171.swim.spec_ref.eio.gz.out # redirect simulator output to file (non-interactive only)
# -redir:prog       /dev/null # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-freq            600000000.0000 # frequency             
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize             16 # instruction fetch queue size (in insts)
-fetch:mplat               15 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                perfect # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 4 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width              16 # instruction decode B/W (insts/cycle)
-issue:width               16 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width              16 # instruction commit B/W (insts/cycle)
-ruu:size                 128 # register update unit (RUU) size
-lsq:size                  64 # load/store queue (LSQ) size
-cache:dl1       dl1:32:64:8:f # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       dl2:256:64:8:f # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               2 # l2 data cache hit latency (in cycles)
-cache:il1       il1:32:64:8:f # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               2 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         103 1 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  2 # total number of integer multiplier/dividers available
-res:memport                4 # total number of memory system ports available (to CPU)
-res:fpalu                  8 # total number of floating point ALU's available
-res:fpmult                 2 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000000 # total number of instructions committed
sim_num_refs               34465203 # total number of loads and stores committed
sim_num_loads              27296927 # total number of loads committed
sim_num_stores         7168276.0000 # total number of stores committed
sim_num_branches            2149555 # total number of branches committed
sim_elapsed_time                167 # total simulation time in seconds
sim_inst_rate           598802.3952 # simulation speed (in insts/sec)
sim_total_insn            100000000 # total number of instructions executed
sim_total_refs             34465203 # total number of loads and stores executed
sim_total_loads            27296927 # total number of loads executed
sim_total_stores       7168276.0000 # total number of stores executed
sim_total_branches          2149555 # total number of branches executed
sim_cycle                  75877126 # total simulation time in cycles
sim_IPC                      1.3179 # instructions per cycle
sim_CPI                      0.7588 # cycles per instruction
sim_exec_BW                  1.3179 # total instructions (mis-spec + committed) per cycle
sim_IPB                     46.5213 # instruction per branch
IFQ_count                1212376872 # cumulative IFQ occupancy
IFQ_fcount                 75771103 # cumulative IFQ full count
ifq_occupancy               15.9782 # avg IFQ occupancy (insn's)
ifq_rate                     1.3179 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                 12.1238 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9986 # fraction of time (cycle's) IFQ was full
RUU_count                9671238966 # cumulative RUU occupancy
RUU_fcount                 73261583 # cumulative RUU full count
ruu_occupancy              127.4592 # avg RUU occupancy (insn's)
ruu_rate                     1.3179 # avg RUU dispatch rate (insn/cycle)
ruu_latency                 96.7124 # avg RUU occupant latency (cycle's)
ruu_full                     0.9655 # fraction of time (cycle's) RUU was full
LSQ_count                3302315251 # cumulative LSQ occupancy
LSQ_fcount                   871382 # cumulative LSQ full count
lsq_occupancy               43.5219 # avg LSQ occupancy (insn's)
lsq_rate                     1.3179 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                 33.0232 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0115 # fraction of time (cycle's) LSQ was full
sim_slip                13108002126 # total number of slip cycles
avg_sim_slip               131.0800 # the average slip between issue and retirement
il1.accesses              119230377 # total number of accesses
il1.hits                  119225430 # total number of hits
il1.misses                     4947 # total number of misses
il1.replacements               4691 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               34283140 # total number of accesses
dl1.hits                   31341871 # total number of hits
dl1.misses                  2941269 # total number of misses
dl1.replacements            2941013 # total number of replacements
dl1.writebacks               862411 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0858 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0858 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0252 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl2.accesses                3808627 # total number of accesses
dl2.hits                     872193 # total number of hits
dl2.misses                  2936434 # total number of misses
dl2.replacements            2934386 # total number of replacements
dl2.writebacks               858420 # total number of writebacks
dl2.invalidations                 0 # total number of invalidations
dl2.miss_rate                0.7710 # miss rate (i.e., misses/ref)
dl2.repl_rate                0.7705 # replacement rate (i.e., repls/ref)
dl2.wb_rate                  0.2254 # writeback rate (i.e., wrbks/ref)
dl2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             119230377 # total number of accesses
itlb.hits                 119230345 # total number of hits
itlb.misses                      32 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              34465179 # total number of accesses
dtlb.hits                  34419003 # total number of hits
dtlb.misses                   46176 # total number of misses
dtlb.replacements             46048 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0013 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0013 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power           279608304.4064 # total power usage of rename unit
bpred_power            216130277.7796 # total power usage of bpred unit
window_power           5800091402.1190 # total power usage of instruction window
lsq_power              805899929.1893 # total power usage of load/store queue
regfile_power          1907455546.2106 # total power usage of arch. regfile
icache_power           230109842.7048 # total power usage of icache
dcache_power           977130160.3452 # total power usage of dcache
dcache2_power          235444959.3302 # total power usage of dcache2
alu_power              2520806601.9226 # total power usage of alu
falu_power             2167209295.4074 # total power usage of falu
resultbus_power        4225298088.0221 # total power usage of resultbus
clock_power            4858817795.7751 # total power usage of clock
avg_rename_power             3.6850 # avg power usage of rename unit
avg_bpred_power              2.8484 # avg power usage of bpred unit
avg_window_power            76.4406 # avg power usage of instruction window
avg_lsq_power               10.6211 # avg power usage of lsq
avg_regfile_power           25.1387 # avg power usage of arch. regfile
avg_icache_power             3.0327 # avg power usage of icache
avg_dcache_power            12.8778 # avg power usage of dcache
avg_dcache2_power            3.1030 # avg power usage of dcache2
avg_alu_power               33.2222 # avg power usage of alu
avg_falu_power              28.5621 # avg power usage of falu
avg_resultbus_power         55.6861 # avg power usage of resultbus
avg_clock_power             64.0353 # avg power usage of clock
fetch_stage_power      446240120.4844 # total power usage of fetch stage
dispatch_stage_power   279608304.4064 # total power usage of dispatch stage
issue_stage_power      14564671140.9285 # total power usage of issue stage
avg_fetch_power              5.8811 # average power of fetch unit per cycle
avg_dispatch_power           3.6850 # average power of dispatch unit per cycle
avg_issue_power            191.9507 # average power of issue unit per cycle
total_power            22056792907.8050 # total power per cycle
avg_total_power_cycle      290.6909 # average total power per cycle
avg_total_power_cycle_nofp_nod2     259.0259 # average total power per cycle
avg_total_power_insn       220.5679 # average total power per insn
avg_total_power_insn_nofp_nod2     196.5414 # average total power per insn
rename_power_cc1       32727048.0528 # total power usage of rename unit_cc1
bpred_power_cc1              0.0000 # total power usage of bpred unit_cc1
window_power_cc1       1332375045.0447 # total power usage of instruction window_cc1
lsq_power_cc1          85533804.3823 # total power usage of lsq_cc1
regfile_power_cc1      198400719.8781 # total power usage of arch. regfile_cc1
icache_power_cc1       26937266.6587 # total power usage of icache_cc1
dcache_power_cc1       166499562.8817 # total power usage of dcache_cc1
dcache2_power_cc1      7893778.9720 # total power usage of dcache2_cc1
alu_power_cc1          479033205.5145 # total power usage of alu_cc1
resultbus_power_cc1    956913044.9499 # total power usage of resultbus_cc1
clock_power_cc1        912753251.3424 # total power usage of clock_cc1
avg_rename_power_cc1         0.4313 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.0000 # avg power usage of bpred unit_cc1
avg_window_power_cc1        17.5596 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            1.1273 # avg power usage of lsq_cc1
avg_regfile_power_cc1        2.6148 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         0.3550 # avg power usage of icache_cc1
avg_dcache_power_cc1         2.1943 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.1040 # avg power usage of dcache2_cc1
avg_alu_power_cc1            6.3133 # avg power usage of alu_cc1
avg_resultbus_power_cc1      12.6114 # avg power usage of resultbus_cc1
avg_clock_power_cc1         12.0294 # avg power usage of clock_cc1
fetch_stage_power_cc1  26937266.6587 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1 32727048.0528 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  3028248441.7452 # total power usage of issue stage_cc1
avg_fetch_power_cc1          0.3550 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.4313 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1         39.9099 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  4199066727.6773 # total power per cycle_cc1
avg_total_power_cycle_cc1      55.3404 # average total power per cycle_cc1
avg_total_power_insn_cc1      41.9907 # average total power per insn_cc1
rename_power_cc2       23031340.2337 # total power usage of rename unit_cc2
bpred_power_cc2              0.0000 # total power usage of bpred unit_cc2
window_power_cc2       680421192.2035 # total power usage of instruction window_cc2
lsq_power_cc2          49701867.1191 # total power usage of lsq_cc2
regfile_power_cc2      71809749.6321 # total power usage of arch. regfile_cc2
icache_power_cc2       26937266.6587 # total power usage of icache_cc2
dcache_power_cc2       110372821.7638 # total power usage of dcache_cc2
dcache2_power_cc2      2954520.2787 # total power usage of dcache2_cc2
alu_power_cc2          219165722.1675 # total power usage of alu_cc2
resultbus_power_cc2    408337660.5455 # total power usage of resultbus_cc2
clock_power_cc2        444623422.2249 # total power usage of clock_cc2
avg_rename_power_cc2         0.3035 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.0000 # avg power usage of bpred unit_cc2
avg_window_power_cc2         8.9674 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.6550 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.9464 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         0.3550 # avg power usage of icache_cc2
avg_dcache_power_cc2         1.4546 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0389 # avg power usage of dcache2_cc2
avg_alu_power_cc2            2.8884 # avg power usage of alu_cc2
avg_resultbus_power_cc2       5.3816 # avg power usage of resultbus_cc2
avg_clock_power_cc2          5.8598 # avg power usage of clock_cc2
fetch_stage_power_cc2  26937266.6587 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2 23031340.2337 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  1470953784.0780 # total power usage of issue stage_cc2
avg_fetch_power_cc2          0.3550 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.3035 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2         19.3860 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  2037355562.8274 # total power per cycle_cc2
avg_total_power_cycle_cc2      26.8507 # average total power per cycle_cc2
avg_total_power_insn_cc2      20.3736 # average total power per insn_cc2
rename_power_cc3       47719465.9552 # total power usage of rename unit_cc3
bpred_power_cc3        21613027.7858 # total power usage of bpred unit_cc3
window_power_cc3       1112080303.6943 # total power usage of instruction window_cc3
lsq_power_cc3          121528073.4282 # total power usage of lsq_cc3
regfile_power_cc3      240272832.7871 # total power usage of arch. regfile_cc3
icache_power_cc3       47254524.3723 # total power usage of icache_cc3
dcache_power_cc3       191848791.0585 # total power usage of dcache_cc3
dcache2_power_cc3      25709679.4056 # total power usage of dcache2_cc3
alu_power_cc3          423343061.7665 # total power usage of alu_cc3
resultbus_power_cc3    728796746.2310 # total power usage of resultbus_cc3
clock_power_cc3        832249029.7555 # total power usage of clock_cc3
avg_rename_power_cc3         0.6289 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.2848 # avg power usage of bpred unit_cc3
avg_window_power_cc3        14.6563 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            1.6016 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        3.1666 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         0.6228 # avg power usage of icache_cc3
avg_dcache_power_cc3         2.5284 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.3388 # avg power usage of dcache2_cc3
avg_alu_power_cc3            5.5793 # avg power usage of alu_cc3
avg_resultbus_power_cc3       9.6050 # avg power usage of resultbus_cc3
avg_clock_power_cc3         10.9684 # avg power usage of clock_cc3
fetch_stage_power_cc3  68867552.1581 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3 47719465.9552 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  2603306655.5840 # total power usage of issue stage_cc3
avg_fetch_power_cc3          0.9076 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.6289 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3         34.3095 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  3792415536.2398 # total power per cycle_cc3
avg_total_power_cycle_cc3      49.9810 # average total power per cycle_cc3
avg_total_power_insn_cc3      37.9242 # average total power per insn_cc3
total_rename_access       100000000 # total number accesses of rename unit
total_bpred_access                0 # total number accesses of bpred unit
total_window_access       369632923 # total number accesses of instruction window
total_lsq_access           34647237 # total number accesses of load/store queue
total_regfile_access      155637344 # total number accesses of arch. regfile
total_icache_access       119230377 # total number accesses of icache
total_dcache_access        34283140 # total number accesses of dcache
total_dcache2_access        3808627 # total number accesses of dcache2
total_alu_access           99381928 # total number accesses of alu
total_resultbus_access    125147351 # total number accesses of resultbus
avg_rename_access            1.3179 # avg number accesses of rename unit
avg_bpred_access             0.0000 # avg number accesses of bpred unit
avg_window_access            4.8715 # avg number accesses of instruction window
avg_lsq_access               0.4566 # avg number accesses of lsq
avg_regfile_access           2.0512 # avg number accesses of arch. regfile
avg_icache_access            1.5714 # avg number accesses of icache
avg_dcache_access            0.4518 # avg number accesses of dcache
avg_dcache2_access           0.0502 # avg number accesses of dcache2
avg_alu_access               1.3098 # avg number accesses of alu
avg_resultbus_access         1.6493 # avg number accesses of resultbus
max_rename_access                16 # max number accesses of rename unit
max_bpred_access                  0 # max number accesses of bpred unit
max_window_access                53 # max number accesses of instruction window
max_lsq_access                   11 # max number accesses of load/store queue
max_regfile_access               44 # max number accesses of arch. regfile
max_icache_access                16 # max number accesses of icache
max_dcache_access                 8 # max number accesses of dcache
max_dcache2_access                6 # max number accesses of dcache2
max_alu_access                   13 # max number accesses of alu
max_resultbus_access             16 # max number accesses of resultbus
max_cycle_power_cc1        234.7393 # maximum cycle power usage of cc1
max_cycle_power_cc2        202.9479 # maximum cycle power usage of cc2
max_cycle_power_cc3        208.9961 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 819200 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size              199810704 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x012001a610 # program entry point (initial PC)
ld_environ_base        0x011ff96e70 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                24496 # total number of pages allocated
mem.page_mem                195968k # total size of memory pages allocated
mem.ptab_misses               24901 # total first level page table misses
mem.ptab_accesses        1149338678 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

